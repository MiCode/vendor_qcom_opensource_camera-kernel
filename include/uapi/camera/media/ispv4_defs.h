/* SPDX-License-Identifier: GPL-2.0-only WITH Linux-syscall-note */
/*
 * Copyright (c) 2016-2019, The Linux Foundation. All rights reserved.
 */

#ifndef __UAPI_ISP_DEFS_H__
#define __UAPI_ISP_DEFS_H__

#include <linux/videodev2.h>
#include <linux/types.h>
#include <linux/ioctl.h>

#define ISPV4_VNODE_NAME "ispv4-devnode"

#define MFNR_REF_FRAME_NUM 7

#define ISPV4_DEVICE_TYPE_BASE MEDIA_ENT_F_OLD_BASE
#define ISPV4_VIDEO_DEVICE_TYPE (ISPV4_DEVICE_TYPE_BASE + 400 + 1)
#define ISPV4_ISP_DEVICE_TYPE (ISPV4_DEVICE_TYPE_BASE + 400 + 2)
#define ISPV4_ASST_DEVICE_TYPE (ISPV4_DEVICE_TYPE_BASE + 400 + 3)

#define GEN1_SPEED 1
#define GEN2_SPEED 2
#define GEN3_SPEED 3
#define GEN4_SPEED 4

/**
 * struct ispv4_control - Structure used by ioctl control for ispv3
 *
 * @op_code:          This is the op code for isp control
 * @size:                  Control command size
 * @handle:              Control command payload
 */
struct ispv4_control {
	uint32_t op_code;
	uint32_t size;
	uint64_t handle;
};

/* ISP IOCTL */
#define VIDIOC_ispv4_CONTROL                                                   \
	_IOWR('V', BASE_VIDIOC_PRIVATE + 15, struct ispv4_control)
/* LED IOCTL */
#define ISPV4_LED_CTL _IOWR('V', BASE_VIDIOC_PRIVATE + 20, int)

#define ISPV4_BUSMON_MATCH_START _IOWR('B', 0, int)
#define ISPV4_BUSMON_MATCH_STOP _IOWR('B', 1, int)
#define ISPV4_BUSMON_PREFM_START _IOWR('B', 2, int)
#define ISPV4_BUSMON_PREFM_STOP _IOWR('B', 3, int)

struct ispv4_cam_control {
	uint32_t cmd;
	uint64_t size;
	union {
		uint64_t priv;
		void *uptr;
	};
#define ISPV4_ASST_LOG_PARAM_P 0
#define ISPV4_ASST_LOG_RET_P 1
	uint32_t params[16];
};

#define ISPV4_CAM_CTL_NR_BASE 250

#define ISPV4_CAM_CTL_ISP                                                      \
	_IOWR('M', ISPV4_CAM_CTL_NR_BASE, struct ispv4_cam_control)

#define ISPV4_CAM_CTL_ASST                                                     \
	_IOWR('M', ISPV4_CAM_CTL_NR_BASE + 1, struct ispv4_cam_control)

enum {
	ISPV4_FW_LOAD = 1,
	ISPV4_POWERON,
	ISPV4_RPROC_BOOT,
	ISPV4_IONMAP,
	ISPV4_IONUNMAP,
	ISPV4_POWEROFF,
	ISPV4_RPROC_SHUTDOWN,
	ISPV4_RPMSG_SUBS_ISP,
	ISPV4_RPMSG_SUBS_ASST,
	ISPV4_RPMSG_CTRL_ISP,
	ISPV4_RPMSG_CTRL_ASST,
	ISPV4_RPROC_DDR_PARAM_LOAD,
	ISPV4_RPROC_DDR_PARAM_STORE,
	ISPV4_PCIE_PM_CTL,
	ISPV4_PCIE_GET_ASPM_STATE,
	ISPV4_PCIE_SET_LINK_SPEED,
	ISPV4_PCIE_GET_LINK_SPEED,
	ISPV4_CAM_ASST_READ,
	ISPV4_CAM_ASST_WRITE,
	ISPV4_CAM_ASST_SET,
	ISPV4_ASST_CMD_SETLOGLEVEL,
	ISPV4_ASST_CMD_LOGENABLE,
	ISPV4_ASST_CPU_PLL_INIT,
	ISPV4_ASST_CPU_PLL_TEST,
	ISPV4_ASST_DDR_PLL_INIT,
	ISPV4_ASST_DDR_PLL_TEST,
	ISPV4_PMIC_REGU_CONFIG,
	ISPv4_ASST_PVT_SENSOR_GET
};

enum ispv4_ionmap_region {
	ISPV4_IONMAP_FOR_NPU0,
	ISPV4_IONMAP_FOR_TUNNING,
	ISPV4_IONMAP_FOR_PARAM,
	ISPV4_IONMAP_FOR_CATCHINFO1,
	ISPV4_IONMAP_FOR_CATCHINFO2,
	ISPV4_IONMAP_FOR_CATCHIMG1,
	ISPV4_IONMAP_FOR_CATCHIMG2,
	ISPV4_IONMAP_FOR_3A,
	ISPV4_IONMAP_FOR_DDRTRANING,
	ISPV4_IONMAP_FOR_COREDUMP,
	ISPV4_IONMAP_FOR_FAFD,
	ISPV4_IONMAP_FOR_NPU1,
	ISPV4_IONMAP_NUM,
};

enum LED_SHOW_MODE {
	LED_GREEN_2S = 0,
	LED_GREEN_05S,
	LED_GREEN_BLUE_ALTER_1s,
	LED_GREEN_ALL,
	LED_RED_ALL,
	LED_GREEN_RED_ALL,
	LED_ALL_OFF
};

#define ISPV4_CTRLPARAM_IONMAP_FD 0
#define ISPV4_CTRLPARAM_IONMAP_REGION 1

enum ispv4_pmic_config {
	ISPV4_PMIC_CONFIG_ANALOG_BYPASS,
	ISPV4_PMIC_CONFIG_DIGITAL_BYPASS,
	ISPV4_PMIC_CONFIG_SAVE_CURRENT_ON,
	ISPV4_PMIC_CONFIG_SAVE_CURRENT_OFF
};

enum ispv4_pmic_id {
	ISPV4_PMIC_BUCK1,
	ISPV4_PMIC_BUCK2,
	ISPV4_PMIC_BUCK3,
	ISPV4_PMIC_BUCK4,
	ISPV4_PMIC_BUCK5,
	ISPV4_PMIC_BUCK6,
	ISPV4_PMIC_BUCK7,
	ISPV4_PMIC_LDO1,
	ISPV4_PMIC_LDO2,
	ISPV4_PMIC_LDO3,
	ISPV4_PMIC_LDO4,
	ISPV4_PMIC_LDO5,
	ISPV4_PMIC_LDO6,
	ISPV4_PMIC_MAX,
};

struct ispv4_pmic_regu {
	uint32_t ops;
	uint32_t id;
	uint32_t en;
	uint32_t voltage;
};

enum pcie_msi {
	MSI_MAILBOX = 0,
	MSI_MIPI_RX0_FS,
	MSI_MIPI_RX0_FE,
	MSI_DMA_WR_RAW_L_DONE,
	MSI_DMA_WR_RAW_S_DONE,
	MSI_DMA_WR_PP_L_DONE,
	MSI_DMA_WR_PP_S_DONE,
	MSI_DMA_WR_PP2PD_L_DONE,
	MSI_DMA_WR_PP2PD_S_DONE,
	MSI_DMA_WR_LSC_STAT_L_DONE,
	MSI_DMA_WR_LSC_STAT_S_DONE,
	MSI_DMA_WR_AWB_STAT_DONE,
	MSI_DMA_WR_AF_STAT_DONE,
	MSI_DMA_WR_AE_STAT_L_DONE,
	MSI_DMA_WR_AE_STAT_S_DONE,
	MSI_TIMER64_INTR,
	MSI_RTC_INTR,
	MSI_WDT0_INTR,
	MSI_WDT1_INTR,
	MSI_WDT0_SYS_RST_INTR,
	MSI_WDT1_SYS_RST_INTR,
	MSI_SWINT0 = 22, /*in use by hdma wr ch*/
	MSI_SWINT1, /*in use by hdma rd ch*/
	MSI_SWINT2,
	MSI_SWINT3,
	MSI_SWINT4, /*in use by thermal*/
	MSI_SWINT5, /*in use by sof*/
	MSI_SWINT6, /*in use by eof*/
	MSI_SWINT7,
	MSI_SWINT8,
	MSI_SWINT9,
	MSI_MAX_NUM,
};

enum pcie_hdma_dir {
	HDMA_TO_DEVICE = 0,
	HDMA_FROM_DEVICE,
};

enum ispv4_link_sta {
	ISPV4_ENABLE_L0s,
	ISPV4_DISABLE_L0s,
	ISPV4_ENABLE_L1,
	ISPV4_DISABLE_L1,
	ISPV4_ENABLE_L1_1,
	ISPV4_DISABLE_L1_1,
	ISPV4_ENABLE_L1_2,
	ISPV4_DISABLE_L1_2,
};

/* IPC about */
enum xm_ispv4_etps {
	XM_ISPV4_IPC_EPT_RPMSG_ISP,
	XM_ISPV4_IPC_EPT_RPMSG_ASST,
	XM_ISPV4_IPC_EPT_MAX,
};

enum ICC_PARAM_RES {
	ICC_CMD_ERR = 0,
	ICC_CMD_OK,
};

typedef enum {
	MIPC_MSGHEADER_CMD = 0,
	MIPC_MSGHEADER_CMD_NEED_ACK,
	MIPC_MSGHEADER_COMMON,
	MIPC_MSGHEADER_COMMON_NEED_ACK,
	MIPC_MSGHEADER_ACK,
	MIPC_MSGHEADER_RET_V,
	MIPC_MSGHEADER_RET_D,
} xm_ispv4_mipc_type;

typedef enum {
	MIPC_MSGTYPE_UNKNOWN,
	MIPC_MSGTYPE_TEST_RET_VAL,
	MIPC_MSGTYPE_TEST_RET_DATA,
	MIPC_MSGTYPE_TEST_SUSPEND,
	/* ICC define start */
	ICC_REQUEST_SETUP_LOAD_NPU_MODEL,
	ICC_REQUEST_SETUP_LOAD_TUNING_BIN,
	ICC_REQUEST_SETUP_LOAD_USECASE_CONFIG,
	ICC_REQUEST_SETUP_MISC_DATA,
	ICC_REQUEST_PIPE_MIPI_LINK,
	ICC_REQUEST_PIPE_STREAM_ON,
	ICC_REQUEST_PIPE_STANDBY,
	ICC_REQUEST_PIPE_BYPASS,
	ICC_REQUEST_PIPE_STREAM_OFF,
	ICC_REQUEST_PIPE_MISSION,
	ICC_REQUEST_PIPE_SENSOR_META,
	ICC_REQUEST_PIPE_ALGO_DEPEND_UPDATE,
	ICC_REQUEST_DEBUG_LOG_SET_LEVEL,
	ICC_REQUEST_DEBUG_LOG_ENABLE,
	ICC_REQUEST_DEBUG_DUMP_ENABLE,
	ICC_REQUEST_DEBUG_RDMA_INPUT,
	ICC_REQUEST_DEBUG_REGISTER_READ,
	ICC_REQUEST_DEBUG_REGISTER_WRITE,
	ICC_REQUEST_THERMAL_VALUE,
	ICC_NOTIFY_3A_STATISTICS,
	ICC_NOTIFY_PD_INFORMATION,
	ICC_NOTIFY_DEPTH_SEGMENT,
	ICC_NOTIFY_FDFA,
	ICC_NOTIFY_DEBUG_DUMP_DONE,
	ICC_NOTIFY_ERROR_REPORT,
	ICC_REQUEST_NPU_TEST,
	ICC_REQUEST_PIPE_LSC_UPDATE,
	ICC_NOTIFY_LSC,
	ICC_REQUEST_DROP_FRAME,
	ICC_REQUEST_POWER_OFF,
	ICC_REQUEST_MODULE_BYPASS,
	ICC_NOTIFY_EXCEPTION_REPORT,
	ICC_REQUEST_UART_PRINT_ENABLE,
	ICC_REQUEST_SET_NPU_ALGO_PARAM,
	ICC_REQUEST_PIPE_DEBUG_PARAM,
	/* ICC define end */
	MIPC_MSGTYPE_MAX
} xm_ispv4_mipc_func;

enum PVT_GET_TYPE {
	PROCESS_VALUE,
	VOLTAGE_VALUE,
	THERMAL_VALUE
};

#pragma pack(1)
struct xm_ispv4_rpmsg_pkg {
	struct {
		uint32_t id;
		uint32_t type;
		uint32_t param;
	} header;
	uint32_t func;
	uint32_t data[0];
};
#pragma pack()

/* Specific event ids to get notified in user space */
#define MIISP_V4L_EVENT_SOF 0
#define MIISP_V4L_EVENT_EOF 1
#define MIISP_V4L_EVENT_RPMSG_ISP_RECV 2
#define MIISP_V4L_EVENT_RPMSG_ISP_ERR 3
#define MIISP_V4L_EVENT_RPMSG_ASST_RECV 4
#define MIISP_V4L_EVENT_RPMSG_ASST_ERR 5
#define MIISP_V4L_EVENT_EXCEPTION 6
#define MIISP_V4L_EVENT_CRASH 7
#define MIISP_V4L_EVENT_WDT 8
#define MIISP_V4L_EVENT_THERMAL 9

#endif
